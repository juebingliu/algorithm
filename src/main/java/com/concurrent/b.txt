
--1、活跃度失败：当一个活跃线程进入到一个它永远都无法继续执行的状态

--2、框架本身的线程如果与应用程序的线程存在共享数据的时候，最好从共享数据的层面来确保线程安全

--3、timer，servlet，rmi，awt/swing，维持线程安全的方式

--4、并发本质上其实就是线程状态的访问

--5、无状态对象永远都是线程安全的

--6、惰性初始化(类比懒汉单例)是非线程安全的，竞争条件与竞争数据

--7、原子类型atomic，多个原子类型进行写操作需要保持一致性

--8、用锁来保护状态(同一个锁)

--9、线程的几种状态：NEW、RUNNABLE、BLOCKED、WAITING、TIMED_WAITING、TERMINATED

--10、sleep睡眠期间，线程可以被中断，如果被中断会抛出InterruptedException；yield方法让出cpu，使其他线程执行；join方法可以让调用join的线程等待某一线程结束时才执行，join(0)表示无限期等待

--11、共享内存的两个问题：竞态条件与内存可见性；synchronized可以修饰类的实例方法，静态方法，代码块；多个线程可以同时执行同一个synchronized方法，只要他们访问的对象不同即可；synchronized实例方法实际保护的是同一个对象的方法调用；synchronized保护的是对象而非代码，只要访问是同一个对象的synchronized方法，即使是不同的代码，也会被同步顺序访问；一般保护变量时，需要在所有访问该变量的方法上加上synchronized

--12、synchronized对实例方法保护的是实例对象this，对静态方法保护的是类对象，每个对象都有一把锁、一个等待队列和一个条件队列，条件队列用于线程间的协作

--13、可重入性，synchronized本身是一个可重入锁；可重入锁是通过记录锁的持有线程和持有数量来实现的；volatile保证内存可见性

--14、并发包：CopyOnWriteArrayList，ConcurrentHashMap，ConcurrentLinkedQueue，ConcurrentSkipListSet

--15、线程协作的模式：生产者/消费者模式，线程池，fork/join，future异步调用

--16、wait/notify，wait()/wait(long)，前者无限期等待，后者等待固定时长long，调用wait会将当前线程放进条件队列(线程状态变为waiting/time-waiting)，等待其他线程notify，调用notify后再次竞争对象锁，如果获得对象锁状态变为runnable，没有获取到变为blocked；等待条件(notify)重新执行；而notify所做的就是从条件队列中选一个线程移除并唤醒；wait/notify只能再synchronized代码块中被调用；
wait/notify被不同的线程调用，但共享相同的锁和条件队列

--17、wait/notify的局限性，只能有一个条件等待队列

--18、线程的取消/关闭：停止一个线程的主要机制是中断，中断并不是强迫终止一个线程，它是一种协作机制，是个线程传递一个取消信号，但是由线程来决定何时退出；Thread.interrupted()判断线程中断标志是否为true，并清空中断标志位

--19、CAS和原子类；synchronized是一种悲观锁（阻塞的，涉及到等待队列与上下文切换），而cas是一种乐观锁（非阻塞的不会有上下文切换，性能更好）

--20、cas的弊端：ABA问题，可以使用AtomicStampedReference添加一个默认时间戳，只有值和时间戳相同才能进行修改

--21、显示锁lock，tryLock()尝试获取锁，立即返回，不阻塞；tryLock(long time,TimeUnit unit)阻塞版本；相比synchronized，显示锁支持以非阻塞方式获取锁，可以响应中断，可以设置超时时间，更加灵活

--22、可重入所reentrantLock，默认构造函数是非公平的，可以通过参数fair指定公平或非公平锁，使用tryLock()可以避免死锁，因为是非阻塞的；park与yield的区别，yield只是告诉os可以让其他线程运行，但自己依然是可以运行的状态，而park会直接放弃调度资格，使线程进入waiting状态；park是响应中断的；unsafe类提供了硬件级别的原子操作

--23、AQS：能获得锁就立即获得，否则加入等待队列，被唤醒后检查自己是否是第一个等待的线程，如果是且能获得锁，则返回，否则继续等待，公平锁与非公平锁的区别在于hasQueuedPredecessors()，多了一步检查；公平锁效率低的原因并不是因为队列检查慢，而是因为活跃线程得不到锁，进入等待队列，导致上下文切换，降低整体效率

--24、使用习惯：能用synchronized就用synchronized，不满足需求时考虑ReentrantLock

--25、显示条件Condition中的方法与wait/notify对应

--26、写时复制的list和set特点：他是线程安全的、迭代器不支持修改操作、以原子方式支持一些复合操作；写操作更新数组的时候也是整体更新，每次插入或者删除操作都会先新建一个新数组然后把原数组的内容复制到新数组中，在新数组进行需要的修改；由于内部数组被volatile关键字修饰，所以读操作进行时能读到最新的内容；读读操作可以并行，读写操作也可以并行；写写操作需要同步（ReentrantLock）；写时复制仅仅只是优化了读操作，牺牲了写操作的性能

--27、concurrentHashMap：并发安全，直接支持原子复合操作，支持高并发，读写完全并行，写操作支持一定程度的并行，迭代不用加锁，不回抛出并发修改异常，弱一致性

--28、concurrentHashMap原理：分段锁，读不需要锁，默认情况下段是16个

--29、跳跃表：不使用锁，所有操作都是无阻塞的，所有操作都是可以并行的，多线程可以同时写，弱一致性，与TreeMap类似可排序

--30、无所非阻塞并发队列：concurrentLinkedQueue，concurrentLinkedDeque