
--1、thread.run()为同步方法调用，由main主线程加持，而thread.start()则是异步方法调用，由cpu的“线程规划器”加持

--2、thread.interrupted()方法会清除线程的中断状态，而thread.isInterrupted()不会

--3、抛出异常会中断线程

--4、sleep状态与interrupt状态是不共存的，无论是先sleep再interrupt，或者先interrupt再sleep都会进入catch部分

--5、stop()方法慎用

--6、return可以和interrupt()方法一起使用中断线程

--7、suspend与resume方法，避免锁独占，不同步

--8、synchronized修饰的方法被调用是，其他线程还是可以异步调用非synchronized修饰的方法 (异步)，如果多个线程调用synchronized修饰的方法则要排队等待执行(同步)

--9、脏读

--10、锁住的对象在锁释放前可再次获得锁（锁重入），某个锁住的线程如果出现异常，则自动释放锁

--11、synchronized(){}同步代码块可以锁住非this对象实例，这样能提升效率，这样不用和其他线程去争夺this对象的使用能提升性能

--12、同步代码块的线程调用与对象中的同步方法调用一致，对于不同的对象监视器，synchronized修饰的方法或者代码块还是以异步执行

--13、如果各线程持有不同的锁，也是异步执行的，如果是class锁则可以保证该class内的方法都是同步的

--14、volatile关键字解决线程私有堆栈与公共堆栈的可见性，但不支持原子性，synchronized支持原子性

--15、atomicInteger原子操作

--16、互斥，可见

--17、wait()停止线程，notify()重启线程

--18、wait()及时释放锁，而notify()必须执行完同步代码块中的代码才释放锁，遇到异常终止线程并释放锁

--19、假死状态是有与同类被同类多次唤醒，需要notifyAll所有的线程等待对象

--20、管道流可以理解成一个消息队列，管道读写流必须一一对应

--21、join方法等待线程对象的销毁，join与synchronized区别

--22、join()与interrupt()无法共存

--23、join()内部实现有wait()方法参与，所以会释放锁(存在竞争)，而sleep()方法不释放锁

--24、ThreadLocal线程隔离，initialValue设定默认值，继承之后也保持主子线程隔离

--25、lock.lock()将持有对象监视器，类比sychronized关键字

--26、condition对象可以选择性的通知，也可以实现等待/通知模式，方法是await()和signal()/signalAll()，分别对应object对象中的wait()和notify()/notifyAll()

--27、公平锁，非公平锁，顺序或者非顺序获得锁，默认是非公平创建锁的

--28、lock的各种api

--29、读锁(共享锁)，写锁(排他锁)，读读共享，写写互斥，读写互斥，写读互斥

--30、timer各种api
